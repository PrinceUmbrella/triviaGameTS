{"version":3,"sources":["components/Score.tsx","components/CheckAnswer.tsx","redux/action.tsx","components/FlippingCard.tsx","components/SetOfQuestions.ts","components/Final.tsx","components/PlayerProgress.tsx","components/Questions.tsx","components/Game.tsx","redux/reducer.tsx","components/InputHandler.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Score","currentValue","useSelector","state","playerOne","currentQuestion","playerTwo","currentPoints","className","Card","body","color","CardText","Badge","CardTitle","players","name","score","CheckAnswer","answer","playerAnswer","UncontrolledAlert","Alert","updateScore","index","type","setAnswer","getQuestions","questionList","setPlayerAnswer","playerName","correctAnswer","incorrectAnswer","incorrectQuestion","FlippingCard","props","useState","isFlipped","setIsFlipped","isCurrentPlayerWinner","incorrectList","map","question","ListGroupItem","flipDirection","text","onClick","CardBody","Button","ListGroup","listOfQuestions","allCategory","questionsList","allQuestion","x","questions","levelOne","shuffleArray","getLevelQuestion","levelTwo","levelThree","levelFour","levelFive","slice","options","level","levelList","worth","array","i","length","j","Math","floor","random","Final","dispatch","useDispatch","Row","Col","to","size","block","PlayerProgress","currentPlayer","Progress","value","QuestionsDisplay","rSelected","setRSelected","currentQuestionNum","a","undefined","Jumbotron","fluid","Container","align","option","key","id","active","buttonClicked","disabled","Game","sm","md","lg","currentAnswer","Questions","initalState","InputHandler","playerOneInfo","setPlayerOneInfo","playerTwoInfo","setPlayerTwoInfo","role","InputGroup","Input","placeholder","onChange","event","target","nameTwo","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION__","compose","store","createStore","action","updatePlayerList","player","updatePlayerName","updateCorrectList","updateIncorrectList","names","push","newState","App","basename","style","marginTop","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7a90a2f6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../App.css\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Badge, Card, CardText, CardTitle } from \"reactstrap\";\r\n\r\nfunction Score() {\r\n    let currentValue: any = useSelector((state) => state);\r\n    let playerOne = currentValue.currentQuestion % 2 === 0 ? \"danger\" : \"\";\r\n    let playerTwo = currentValue.currentQuestion % 2 !== 0 ? \"danger\" : \"\";\r\n    let currentPoints =\r\n        (currentValue.currentQuestion % 2\r\n            ? ((currentValue.currentQuestion - 1) / 2) % 5\r\n            : (currentValue.currentQuestion / 2) % 5) + 1;\r\n    return (\r\n        <div className=\"App\">\r\n            <Card body color=\"warning\">\r\n                <CardText>\r\n                    <h1>\r\n                        <Badge color=\"secondary\">\r\n                            For {currentPoints}{\" \"}\r\n                            {currentPoints == 1 ? \"Point\" : \"Points\"}\r\n                        </Badge>\r\n                    </h1>\r\n                </CardText>\r\n            </Card>\r\n            <br />\r\n            <br />\r\n            <Card body color={playerOne}>\r\n                <CardTitle>\r\n                    <h3>{currentValue.players[0].name}</h3>\r\n                </CardTitle>\r\n                <CardText>\r\n                    {\" \"}\r\n                    <h3>\r\n                        <Badge color=\"secondary\">\r\n                            {currentValue.players[0].score}{\" \"}\r\n                            {currentValue.players[0].score == 1\r\n                                ? \"Point\"\r\n                                : \"Points\"}\r\n                        </Badge>\r\n                    </h3>\r\n                </CardText>\r\n            </Card>\r\n            <br />\r\n            <br />\r\n            <Card body color={playerTwo}>\r\n                <CardTitle>\r\n                    <h3>{currentValue.players[1].name}</h3>\r\n                </CardTitle>\r\n                <CardText>\r\n                    <h3>\r\n                        <Badge color=\"secondary\">\r\n                            {currentValue.players[1].score}{\" \"}\r\n                            {currentValue.players[1].score == 1\r\n                                ? \"Point\"\r\n                                : \"Points\"}\r\n                        </Badge>\r\n                    </h3>\r\n                </CardText>\r\n            </Card>\r\n            <br />\r\n        </div>\r\n    );\r\n}\r\nexport default Score;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Alert, UncontrolledAlert } from \"reactstrap\";\r\n\r\nfunction CheckAnswer() {\r\n    const state: any = useSelector((state: any) => state);\r\n    const answer = state.answer;\r\n    const playerAnswer = state.playerAnswer;\r\n\r\n    return answer === playerAnswer ? (\r\n        <UncontrolledAlert color=\"success\">Correct Answer</UncontrolledAlert>\r\n    ) : (\r\n        <Alert color=\"danger\">{answer} was the correct answer</Alert>\r\n    );\r\n}\r\n\r\nexport default CheckAnswer;\r\n","import { Question } from \"../interfaces/gameInterfaces\";\r\n\r\nexport const ADD_PLAYER = \"ADD_PLAYER\";\r\nexport const SELECT_PLAYER = \"SELECT_PLAYER\";\r\nexport const UPDATE_SCORE = \"UPDATE_SCORE\";\r\nexport const NEXT_QUESTION = \"NEXT_QUESTION\";\r\nexport const SET_ANSWER = \"SET_ANSWER\";\r\nexport const SET_PLAYER_ANSWER = \"SET_PLAYER_ANSWER\";\r\nexport const CORRECT_ANSWER = \"CORRECT_ANSWER\";\r\nexport const INCORRECT_ANSWER = \"INCORRECT_ANSWER\";\r\nexport const RESET_STATE = \"RESET_STATE\";\r\nexport const GET_QUESTIONS = \"GET_QUESTIONS\";\r\n\r\nexport function updateScore(index: any, score: any) {\r\n    return {\r\n        type: UPDATE_SCORE,\r\n        score: score,\r\n        index,\r\n    };\r\n}\r\n\r\nexport function setAnswer(answer: string | undefined) {\r\n    return {\r\n        type: SET_ANSWER,\r\n        answer: answer,\r\n    };\r\n}\r\n\r\nexport function getQuestions(questionList: Question[] | undefined) {\r\n    return {\r\n        type: GET_QUESTIONS,\r\n        questionList,\r\n    };\r\n}\r\n\r\nexport function resetState() {\r\n    return {\r\n        type: RESET_STATE,\r\n    };\r\n}\r\n\r\nexport function setPlayerAnswer(answer: string | undefined) {\r\n    return {\r\n        type: SET_PLAYER_ANSWER,\r\n        playerAnswer: answer,\r\n    };\r\n}\r\n\r\nexport function playerName(index: any, name: any) {\r\n    return {\r\n        type: ADD_PLAYER,\r\n        index,\r\n        name,\r\n    };\r\n}\r\n\r\nexport function selectPlayer(index: any) {\r\n    return {\r\n        type: SELECT_PLAYER,\r\n        index,\r\n    };\r\n}\r\n\r\nexport function correctAnswer(index: any) {\r\n    return {\r\n        type: CORRECT_ANSWER,\r\n        index,\r\n    };\r\n}\r\n\r\nexport function incorrectAnswer(index: any, incorrectQuestion: any) {\r\n    return {\r\n        type: INCORRECT_ANSWER,\r\n        index,\r\n        incorrectQuestion,\r\n    };\r\n}\r\n\r\nexport function moveToNextQuestion() {\r\n    return {\r\n        type: NEXT_QUESTION,\r\n    };\r\n}\r\n","import React, { useState } from \"react\";\r\nimport ReactCardFlip from \"react-card-flip\";\r\nimport { useSelector } from \"react-redux\";\r\nimport {\r\n    Badge,\r\n    Button,\r\n    Card,\r\n    CardBody,\r\n    CardText,\r\n    CardTitle,\r\n    ListGroup,\r\n    ListGroupItem,\r\n} from \"reactstrap\";\r\n\r\nfunction FlippingCard(props: any) {\r\n    const state: any = useSelector((state) => state);\r\n    const [isFlipped, setIsFlipped] = useState(false);\r\n    let isCurrentPlayerWinner =\r\n        state.players[props.index].score >\r\n        state.players[(props.index + 1) % 2].score;\r\n\r\n    const incorrectList = state.players[\r\n        props.index\r\n    ].incorrectAnswer.map((question: any) => (\r\n        <ListGroupItem color=\"warning\">{question}</ListGroupItem>\r\n    ));\r\n\r\n    return (\r\n        <ReactCardFlip isFlipped={isFlipped} flipDirection=\"horizontal\">\r\n            <Card\r\n                color={isCurrentPlayerWinner ? \"success\" : \"warning\"}\r\n                text=\"white\"\r\n                onClick={() => {\r\n                    setIsFlipped(!isFlipped);\r\n                }}\r\n            >\r\n                <CardBody className=\"text-center\">\r\n                    <CardTitle>\r\n                        <h2>\r\n                            {isCurrentPlayerWinner\r\n                                ? \"Congratulations You Won\"\r\n                                : \"\"}\r\n                        </h2>\r\n                        <h2>{state.players[props.index].name} </h2>\r\n                    </CardTitle>\r\n                    <CardText>\r\n                        <h3>\r\n                            <Badge color=\"secondary\">\r\n                                {state.players[props.index].score}{\" \"}\r\n                                {state.players[props.index].score === 1\r\n                                    ? \"Point\"\r\n                                    : \"Points\"}\r\n                            </Badge>\r\n                        </h3>\r\n                    </CardText>\r\n                    <Button\r\n                        color=\"danger\"\r\n                        onClick={() => {\r\n                            setIsFlipped(!isFlipped);\r\n                        }}\r\n                    >\r\n                        See Incorrect Questions\r\n                    </Button>\r\n                </CardBody>\r\n            </Card>\r\n\r\n            <Card\r\n                onClick={() => {\r\n                    setIsFlipped(!isFlipped);\r\n                }}\r\n            >\r\n                <CardBody className=\"text-center\">\r\n                    <CardTitle>\r\n                        {\" \"}\r\n                        <h1>Incorrect Questions</h1>\r\n                    </CardTitle>\r\n\r\n                    <CardText>\r\n                        <ListGroup>{incorrectList}</ListGroup>\r\n                    </CardText>\r\n                    <Button\r\n                        color=\"primary\"\r\n                        onClick={() => {\r\n                            setIsFlipped(!isFlipped);\r\n                        }}\r\n                    >\r\n                        Go Back To Score\r\n                    </Button>\r\n                </CardBody>\r\n            </Card>\r\n        </ReactCardFlip>\r\n    );\r\n}\r\n\r\nexport default FlippingCard;\r\n","import questionList from \"../data/questionsInput.json\";\r\nimport { Question, Category, RootInput } from \"../interfaces/gameInterfaces\";\r\n\r\nexport default function listOfQuestions(): Question[] {\r\n    const jsonFormat: RootInput = questionList;\r\n    const allCategory: Category[] = jsonFormat.questionsList;\r\n    let allQuestion: Question[] = [];\r\n    allCategory.map(\r\n        (x: Category) => (allQuestion = [...allQuestion, ...x.questions])\r\n    );\r\n\r\n    const levelOne: Question[] = shuffleArray(getLevelQuestion(allQuestion, 1));\r\n    const levelTwo: Question[] = shuffleArray(getLevelQuestion(allQuestion, 2));\r\n    const levelThree: Question[] = shuffleArray(\r\n        getLevelQuestion(allQuestion, 3)\r\n    );\r\n    const levelFour: Question[] = shuffleArray(\r\n        getLevelQuestion(allQuestion, 4)\r\n    );\r\n    const levelFive: Question[] = shuffleArray(\r\n        getLevelQuestion(allQuestion, 5)\r\n    );\r\n\r\n    allQuestion = [\r\n        ...levelOne.slice(0, 2),\r\n        ...levelTwo.slice(0, 2),\r\n        ...levelThree.slice(0, 2),\r\n        ...levelFour.slice(0, 2),\r\n        ...levelFive.slice(0, 2),\r\n    ];\r\n\r\n    allQuestion.map((question: Question) => {\r\n        question.options = shuffleArray(question.options);\r\n    });\r\n\r\n    return allQuestion;\r\n}\r\n\r\nfunction getLevelQuestion(questionList: Question[], level: number): Question[] {\r\n    let levelList: Question[] = [];\r\n    questionList.map((x: Question) => {\r\n        if (x.worth === level) {\r\n            levelList = [...levelList, x];\r\n        }\r\n    });\r\n\r\n    return levelList;\r\n}\r\n\r\nfunction shuffleArray(array: any) {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n    return array;\r\n}\r\n","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Col, Row } from \"reactstrap\";\r\nimport { getQuestions, resetState } from \"../redux/action\";\r\nimport FlippingCard from \"./FlippingCard\";\r\nimport listOfQuestions from \"./SetOfQuestions\";\r\n\r\nfunction Final() {\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <div>\r\n            <Row>\r\n                <Col>\r\n                    <FlippingCard index={0}></FlippingCard>\r\n                </Col>\r\n                <Col>\r\n                    <FlippingCard index={1}></FlippingCard>\r\n                </Col>\r\n            </Row>\r\n            <br />\r\n            <br />\r\n            <Link\r\n                to=\"/home\"\r\n                onClick={() => {\r\n                    dispatch(resetState());\r\n                    dispatch(getQuestions(listOfQuestions()));\r\n                }}\r\n            >\r\n                <Button color=\"primary\" size=\"lg\" block>\r\n                    Restart Game\r\n                </Button>\r\n            </Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Final;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Progress } from \"reactstrap\";\r\n\r\nfunction PlayerProgress() {\r\n    let currentValue: any = useSelector((state) => state);\r\n    let currentPlayer = currentValue.currentQuestion;\r\n\r\n    return (\r\n        <Progress\r\n            value={currentPlayer ? currentPlayer * 10 : 0}\r\n            color=\"warning\"\r\n        >\r\n            {currentPlayer ? currentPlayer * 10 : 0}%\r\n        </Progress>\r\n    );\r\n}\r\n\r\nexport default PlayerProgress;\r\n","import React, { useState } from \"react\";\r\nimport { Question } from \"../interfaces/gameInterfaces\";\r\nimport { Jumbotron, Button, Container } from \"reactstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n    correctAnswer,\r\n    incorrectAnswer,\r\n    moveToNextQuestion,\r\n    setAnswer,\r\n    setPlayerAnswer,\r\n    updateScore,\r\n} from \"../redux/action\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nfunction QuestionsDisplay(props?: any) {\r\n    const question: Question = props.question;\r\n    const [rSelected, setRSelected] = useState<string>();\r\n    let dispatch = useDispatch();\r\n    const currentQuestionNum: any = useSelector((state) => state);\r\n\r\n    async function buttonClicked() {\r\n        dispatch(setPlayerAnswer(rSelected));\r\n        dispatch(setAnswer(question.answer));\r\n\r\n        if (rSelected === question.answer) {\r\n            dispatch(\r\n                updateScore(\r\n                    currentQuestionNum.currentQuestion % 2,\r\n                    question.worth\r\n                )\r\n            );\r\n            dispatch(correctAnswer(currentQuestionNum.currentQuestion % 2));\r\n        } else {\r\n            dispatch(\r\n                incorrectAnswer(\r\n                    currentQuestionNum.currentQuestion % 2,\r\n                    question.question\r\n                )\r\n            );\r\n        }\r\n        setRSelected(undefined);\r\n        dispatch(moveToNextQuestion());\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {question ? (\r\n                <div>\r\n                    <Jumbotron fluid>\r\n                        <Container fluid align={\"center\"}>\r\n                            <p>{question.question}</p>\r\n                        </Container>\r\n                    </Jumbotron>\r\n                    {question.options.map((option, key: any) => {\r\n                        return (\r\n                            <Button\r\n                                id={key}\r\n                                color=\"secondary\"\r\n                                size=\"lg\"\r\n                                onClick={() => setRSelected(option)}\r\n                                active={rSelected === option}\r\n                                block\r\n                            >\r\n                                {option}\r\n                            </Button>\r\n                        );\r\n                    })}\r\n                </div>\r\n            ) : (\r\n                <Redirect to=\"/\" />\r\n            )}\r\n            <br />\r\n            {rSelected ? (\r\n                <Button\r\n                    color=\"primary\"\r\n                    size=\"lg\"\r\n                    onClick={() => buttonClicked()}\r\n                    block\r\n                >\r\n                    Submit Answer{\" \"}\r\n                </Button>\r\n            ) : (\r\n                <Button color=\"primary\" size=\"lg\" disabled block>\r\n                    Choose Answer{\" \"}\r\n                </Button>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default QuestionsDisplay;\r\n","import React from \"react\";\r\nimport Score from \"./Score\";\r\n\r\nimport { Col, Container, Jumbotron, Row } from \"reactstrap\";\r\nimport { useSelector } from \"react-redux\";\r\nimport CheckAnswer from \"./CheckAnswer\";\r\nimport Final from \"./Final\";\r\nimport PlayerProgress from \"./PlayerProgress\";\r\nimport QuestionsDisplay from \"./Questions\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nfunction Game() {\r\n    const state: any = useSelector((state) => state);\r\n    let currentQuestion = state.currentQuestion;\r\n\r\n    return (\r\n        <Container>\r\n            {state.currentQuestion === 10 ? (\r\n                <Jumbotron>\r\n                    <Container>\r\n                        <Final />\r\n                    </Container>\r\n                </Jumbotron>\r\n            ) : (\r\n                <div>\r\n                    <PlayerProgress />\r\n\r\n                    <Row>\r\n                        <Col sm=\"12\" md=\"12\" lg=\"8\">\r\n                            <br />\r\n                            {state.answer !== \"\" &&\r\n                            state.currentAnswer !== \"\" ? (\r\n                                <CheckAnswer />\r\n                            ) : (\r\n                                <div></div>\r\n                            )}\r\n                            {state.questionList !== [] ? (\r\n                                <QuestionsDisplay\r\n                                    question={\r\n                                        state.questionList[currentQuestion]\r\n                                    }\r\n                                />\r\n                            ) : (\r\n                                <Redirect to=\"/\" />\r\n                            )}\r\n                        </Col>\r\n\r\n                        <Col sm=\"12\" md=\"12\" lg=\"4\">\r\n                            <br />\r\n                            <Score />\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n            )}\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Game;\r\n","import * as GameActions from \"./action\";\r\n//import { combineReducers } from 'redux';\r\nconst initalState = {\r\n    players: [\r\n        {\r\n            name: \"\",\r\n            score: 0,\r\n            correctAnswer: 0,\r\n            incorrectAnswer: [],\r\n        },\r\n        {\r\n            name: \"\",\r\n            score: 0,\r\n            correctAnswer: 0,\r\n            incorrectAnswer: [],\r\n        },\r\n    ],\r\n    currentQuestion: 0,\r\n    answer: \"\",\r\n    playerAnswer: \"\",\r\n    questionList: [],\r\n};\r\n\r\nexport function playReducer(state: any = initalState, action: any) {\r\n    switch (action.type) {\r\n        case GameActions.UPDATE_SCORE:\r\n            const updatePlayerList = state.players.map(\r\n                (player: any, index: any) => {\r\n                    if (index === action.index) {\r\n                        return {\r\n                            ...player,\r\n                            score: player.score + action.score,\r\n                        };\r\n                    }\r\n                    return player;\r\n                }\r\n            );\r\n            return {\r\n                ...state,\r\n                players: updatePlayerList,\r\n            };\r\n        case GameActions.GET_QUESTIONS:\r\n            return {\r\n                ...state,\r\n                questionList: [...action.questionList],\r\n            };\r\n        case GameActions.ADD_PLAYER:\r\n            const updatePlayerName = state.players.map(\r\n                (player: any, index: any) => {\r\n                    if (index === action.index) {\r\n                        return {\r\n                            ...player,\r\n                            name: player.name + action.name,\r\n                        };\r\n                    }\r\n                    return player;\r\n                }\r\n            );\r\n            return {\r\n                ...state,\r\n                players: updatePlayerName,\r\n            };\r\n        case GameActions.CORRECT_ANSWER:\r\n            const updateCorrectList = state.players.map(\r\n                (player: any, index: any) => {\r\n                    if (index === action.index) {\r\n                        return {\r\n                            ...player,\r\n                            correctAnswer: player.correctAnswer + 1,\r\n                        };\r\n                    }\r\n                    return player;\r\n                }\r\n            );\r\n            return {\r\n                ...state,\r\n                players: updateCorrectList,\r\n            };\r\n\r\n        case GameActions.NEXT_QUESTION:\r\n            return {\r\n                ...state,\r\n                currentQuestion: state.currentQuestion + 1,\r\n            };\r\n        case GameActions.SET_ANSWER:\r\n            return {\r\n                ...state,\r\n                answer: action.answer,\r\n            };\r\n        case GameActions.SET_PLAYER_ANSWER:\r\n            return {\r\n                ...state,\r\n                playerAnswer: action.playerAnswer,\r\n            };\r\n        case GameActions.INCORRECT_ANSWER:\r\n            const updateIncorrectList = state.players.map(\r\n                (player: any, index: any) => {\r\n                    if (index === action.index) {\r\n                        return {\r\n                            ...player,\r\n                            incorrectAnswer: [\r\n                                ...state.players[index].incorrectAnswer,\r\n                                action.incorrectQuestion,\r\n                            ],\r\n                        };\r\n                    }\r\n                    return player;\r\n                }\r\n            );\r\n            return {\r\n                ...state,\r\n                players: updateIncorrectList,\r\n            };\r\n        case GameActions.RESET_STATE:\r\n            const names: any = [];\r\n            state.players.map((player: any) => {\r\n                names.push(player.name);\r\n            });\r\n            const newState = initalState.players.map((player: any, index) => {\r\n                return {\r\n                    ...player,\r\n                    name: names[index],\r\n                };\r\n            });\r\n            return {\r\n                ...initalState,\r\n                players: newState,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//const app= combineReducers({score})\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Input, InputGroup, Jumbotron } from \"reactstrap\";\r\nimport { getQuestions, playerName } from \"../redux/action\";\r\nimport { Question } from \"../interfaces/gameInterfaces\";\r\nimport listOfQuestions from \"./SetOfQuestions\";\r\n\r\nfunction InputHandler() {\r\n    const [playerOneInfo, setPlayerOneInfo] = useState<string>();\r\n    const [playerTwoInfo, setPlayerTwoInfo] = useState<string>();\r\n    let allQuestion: Question[] = listOfQuestions();\r\n\r\n    let dispatch = useDispatch();\r\n\r\n    const buttonClicked = (\r\n        nameOne: string | undefined,\r\n        nameTwo: string | undefined\r\n    ) => {\r\n        dispatch(playerName(0, nameOne));\r\n        dispatch(playerName(1, nameTwo));\r\n        dispatch(getQuestions(allQuestion));\r\n    };\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Jumbotron>\r\n                <h1>Welcome !!!</h1>\r\n                <h1>\r\n                    Let's play trivia <span role=\"img\">😁</span>\r\n                </h1>\r\n                <hr />\r\n                <h3>Enter Player Names</h3>\r\n                <InputGroup>\r\n                    <Input\r\n                        type=\"text\"\r\n                        placeholder={\"Player 1's Name\"}\r\n                        onChange={(event) =>\r\n                            setPlayerOneInfo(event.target.value)\r\n                        }\r\n                    />\r\n                </InputGroup>\r\n                <br />\r\n                <InputGroup>\r\n                    <Input\r\n                        type=\"text\"\r\n                        placeholder={\"Player 2's Name\"}\r\n                        onChange={(event) =>\r\n                            setPlayerTwoInfo(event.target.value)\r\n                        }\r\n                    />\r\n                </InputGroup>\r\n                <br />\r\n                {playerTwoInfo && playerOneInfo ? (\r\n                    <Link\r\n                        to=\"/home\"\r\n                        onClick={() =>\r\n                            buttonClicked(playerOneInfo, playerTwoInfo)\r\n                        }\r\n                        className=\"btn btn-primary\"\r\n                    >\r\n                        Start The Game\r\n                    </Link>\r\n                ) : (\r\n                    <Button disabled>Enter Player Names</Button>\r\n                )}\r\n            </Jumbotron>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default InputHandler;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Game from \"./components/Game\";\r\nimport { Switch, Route, Redirect, HashRouter } from \"react-router-dom\";\r\nimport { Container } from \"reactstrap\";\r\nimport { Provider } from \"react-redux\";\r\nimport { compose, createStore } from \"redux\";\r\nimport { playReducer } from \"./redux/reducer\";\r\nimport InputHandler from \"./components/InputHandler\";\r\n\r\ndeclare global {\r\n    interface Window {\r\n        __REDUX_DEVTOOLS_EXTENSION__?: typeof compose;\r\n    }\r\n}\r\n\r\nconst composeEnhancers =\r\n    (window.__REDUX_DEVTOOLS_EXTENSION__ &&\r\n        window.__REDUX_DEVTOOLS_EXTENSION__()) ||\r\n    compose;\r\nconst store = createStore(playReducer, composeEnhancers);\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"container\">\r\n            <Provider store={store}>\r\n                <HashRouter basename=\"/\">\r\n                    <Container style={{ marginTop: 100 }}>\r\n                        <Switch>\r\n                            <Route exact path=\"/\" component={InputHandler} />\r\n                            <Route path=\"/home\" component={Game} />\r\n                            <Redirect to=\"/\" />\r\n                        </Switch>\r\n                    </Container>\r\n                </HashRouter>\r\n            </Provider>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\n\r\nReactDOM.render(\r\n    <div className=\"container\">\r\n        <App />\r\n    </div>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}